"use strict";(self.webpackChunkfour=self.webpackChunkfour||[]).push([[1097],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6574:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=n(1193),l=n.n(o),s=["components"],p={title:"File Handling"},c=void 0,u={unversionedId:"programming/python/file-handling",id:"programming/python/file-handling",title:"File Handling",description:"<div",source:"@site/docs/programming/02-python/07-file-handling.mdx",sourceDirName:"programming/02-python",slug:"/programming/python/file-handling",permalink:"/programming/python/file-handling",editUrl:"https://github.com/The-Programming-Foundation/tutorials/docs/programming/02-python/07-file-handling.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"File Handling"},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/programming/python/functions"},next:{title:"Object oriented programming",permalink:"/programming/oop/"}},d=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Opening a file",id:"opening-a-file",children:[],level:2},{value:"Reading a file",id:"reading-a-file",children:[],level:2},{value:"Writing a file",id:"writing-a-file",children:[],level:2},{value:"Closing a file",id:"closing-a-file",children:[{value:"Output:",id:"output",children:[],level:4}],level:2},{value:"With statement",id:"with-statement",children:[{value:"Write shopping items to a file by using &quot;with&quot; statement and write()",id:"write-shopping-items-to-a-file-by-using-with-statement-and-write",children:[],level:4},{value:"The content in shopping_memo.txt after execution:",id:"the-content-in-shopping_memotxt-after-execution",children:[],level:4},{value:"Output:",id:"output-1",children:[],level:4}],level:2}],f={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l(),{mdxType:"Draggable"},(0,a.kt)("div",{class:"card-demo",style:{position:"relative",zIndex:5}},(0,a.kt)("div",{class:"card",style:{backgroundColor:"#1d9dff",position:"relative",zIndex:5}},(0,a.kt)("iframe",{src:"https://peaceful-bohr-249ea0.netlify.app/images/emulation/python.html",width:"96%",height:"auto"})))),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Python has built-in functions to perform operations on files, including reading and writing files. To perform a file operation, first, a file has to be opened. Then the file operation can be performed. Files are closed afterwards."),(0,a.kt)("h2",{id:"opening-a-file"},"Opening a file"),(0,a.kt)("p",null,"The built-in ",(0,a.kt)("strong",{parentName:"p"},"open()")," function opens and gains access to a file. It accesses a file by the specified filename (in the current directory) or a path to that file.\nA mode can also be specified for different purposes as follows:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"'r'"),": Opens the specified file for reading, and this is the default mode of operation. An error occurs if a file does not exist.",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"'w'"),": Opens the specified file for writing. A new file will be created if it does not exist.",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"'a'"),": Opens the specified file for appending. A new file will be created if it does not exist.",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"'x'"),": Creates the specified file. An error occurs if the file exists.",(0,a.kt)("br",null)),(0,a.kt)("p",null,"As another option, the file could be specified to be one of the two types of mode:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"t"),": Text mode, and this is the default mode.",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"b"),": Binary mode.",(0,a.kt)("br",null)),(0,a.kt)("h2",{id:"reading-a-file"},"Reading a file"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"read()"),": read bytes as a string",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"readline()"),": read a line in the file as a string",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},"readlines()"),": read all lines in the file as a list of strings (each line is a string)",(0,a.kt)("br",null)),(0,a.kt)("h2",{id:"writing-a-file"},"Writing a file"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},'write("a string is specified")'),": write a string as a line into the file.",(0,a.kt)("br",null),"\n",(0,a.kt)("strong",{parentName:"p"},'writelines("a list of strings are specified")'),": write multiple strings, each string as a line, into a file.",(0,a.kt)("br",null)),(0,a.kt)("h2",{id:"closing-a-file"},"Closing a file"),(0,a.kt)("p",null,"The Python function ",(0,a.kt)("strong",{parentName:"p"},"close()")," will free up the memory spaces used by the file."),(0,a.kt)("p",null,'Read in a file and count the number of lines in it\nFor example, count how many records in a file named "records.txt" with the content:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"1. Jerry Smith, USA\n2. Lily Tom, Canada\n3. Peter Frank, France\n4. Susan Yellen, USA\n5. David Elli, Japan\n")),(0,a.kt)("p",null,"It is first opened by open(), then each line is read in and counted at a time; after all lines are read in and counted, the file is closed, and the number of lines is displayed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'# opens records.txt in the current directory with read mode\nrecords = open("records.txt", "r")\n\n# the num_records variable acts as a counter and therefore, is initially set to 0\nnum_records = 0\n\nfor record in records:\n    num_records += 1\n\n# closes records.txt with close()\nrecords.close()\nprint(num_records)\n')),(0,a.kt)("h4",{id:"output"},"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"5\n")),(0,a.kt)("h2",{id:"with-statement"},"With statement"),(0,a.kt)("p",null,'"with" statement prevents errors if the file is not closed properly.'),(0,a.kt)("p",null,"Python syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"with open(<file name>, <mode>) as <a name representing the file object>:\n    <use the attributes/methods of the named file object to do file hanling operations>\n")),(0,a.kt)("h4",{id:"write-shopping-items-to-a-file-by-using-with-statement-and-write"},'Write shopping items to a file by using "with" statement and write()'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'shopping_list = ["apples", "bananas", "green beans", "turkey"]\n\nwith open("shopping_memo.txt", "w") as f:\n    for i in range(len(shopping_list)):\n        item = shopping_list[i] + "\\n"\n        f.write(str(i+1) + ": " + item)\n\nwith open("shopping_memo.txt", "r") as f:\n    lines = f.readlines()\n    for line in lines:\n        print(line.strip()) # strip() removes "\\n"\n\n')),(0,a.kt)("h4",{id:"the-content-in-shopping_memotxt-after-execution"},"The content in shopping_memo.txt after execution:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"1: apples\n2: bananas\n3: green beans\n4: turkey\n\n")),(0,a.kt)("h4",{id:"output-1"},"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"1: apples\n2: bananas\n3: green beans\n4: turkey\n\n")))}m.isMDXComponent=!0}}]);