"use strict";(self.webpackChunkfour=self.webpackChunkfour||[]).push([[7168],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=r.createContext({}),p=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=p(n.components);return r.createElement(u.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,u=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(u,".").concat(m)]||d[m]||s[m]||a;return t?r.createElement(g,o(o({ref:e},c),{},{components:t})):r.createElement(g,o({ref:e},c))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6168:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return g}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=t(1193),l=t.n(o),u=["components"],p={title:"Calculation"},c=void 0,s={unversionedId:"programming/c/calculation",id:"programming/c/calculation",title:"Calculation",description:"<div",source:"@site/docs/programming/01-c/03-calculation.mdx",sourceDirName:"programming/01-c",slug:"/programming/c/calculation",permalink:"/programming/c/calculation",editUrl:"https://github.com/The-Programming-Foundation/tutorials/edit/4.0/docs/programming/01-c/03-calculation.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Calculation"},sidebar:"tutorialSidebar",previous:{title:"Hello Earth",permalink:"/programming/c/hello-earth"},next:{title:"Expansion",permalink:"/programming/c/expansion"}},d=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Operators",id:"operators",children:[],level:2},{value:"Addition",id:"addition",children:[],level:2},{value:"Subtraction",id:"subtraction",children:[],level:2},{value:"Multiplication",id:"multiplication",children:[],level:2},{value:"Division",id:"division",children:[],level:2},{value:"Exponent",id:"exponent",children:[],level:2}],m={toc:d};function g(n){var e=n.components,t=(0,i.Z)(n,u);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)(l(),{mdxType:"Draggable"},(0,a.kt)("div",{class:"card-demo",style:{position:"relative",zIndex:5}},(0,a.kt)("div",{class:"card",style:{backgroundColor:"#000000",position:"relative",zIndex:5,height:"auto"}},(0,a.kt)("iframe",{src:"https://vm.theprogrammingfoundation.org/c.html",width:"100%",height:"180px",background:"black",overflow:"hidden"}),(0,a.kt)("div",{class:"card__body",style:{backgroundColor:"#1d9dff",position:"relative",zIndex:5,width:"-50px",height:"auto"}})))),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"C provides different ways to do arithmetic calculations. These operators are built-in functions of the C language. Real-life operations like addition, subtractions, multiplication are used in the programs for calculation."),(0,a.kt)("h2",{id:"operators"},"Operators"),(0,a.kt)("p",null,"Operators are symbols that are used in expressions or during logical computations. There are 3 types of arithmetic operators."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Unary operators")," - These operate on an operand or variable ",(0,a.kt)("strong",{parentName:"li"},"E.g"),": ++,- -"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Binary operators")," - These work on two operands ",(0,a.kt)("strong",{parentName:"li"},"E.g"),": +, -, ","*",", %, <, <=, !=, &&, =+, =-, %="),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ternary operators")," - This works for if-else conditions. ",(0,a.kt)("strong",{parentName:"li"},"E.g"),": ? :")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The == operator checks whether ",(0,a.kt)("b",null,"a is equal to b"),". However, the ",(0,a.kt)("b",null,"!="),'{" "}\noperator checks whether ',(0,a.kt)("b",null,"a is not equal to b"),". Therefore, they are called\nbinary operators since they either return ",(0,a.kt)("b",null,"true")," or ",(0,a.kt)("b",null,"false"),"."))),(0,a.kt)("h2",{id:"addition"},"Addition"),(0,a.kt)("p",null,"Addition operator can be used to add multiple numbers in C. ",(0,a.kt)("strong",{parentName:"p"},"+")," operator is used to add the numbers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Adding two numbers\n\n#include <stdio.h>\n\nint main() {\n\n  // Defining two variables\n  int num1 = 7;\n  int num2 = 4;\n\n  // Defining result variable\n  int result = num1 + num2;\n\n  printf("%d", result);\n\n  return 0;\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"11\n")),(0,a.kt)("h2",{id:"subtraction"},"Subtraction"),(0,a.kt)("p",null,"Subtraction operator ",(0,a.kt)("strong",{parentName:"p"},"-")," is used for subtraction operation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Subtracting two numbers\n\n#include <stdio.h>\n\nint main() {\n\n  // Defining two variables\n  int num1 = 7;\n  int num2 = 4;\n\n  // Defining result variable\n  int result = num1 - num2;\n\n  printf("%d", result);\n\n  return 0;\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"3\n")),(0,a.kt)("h2",{id:"multiplication"},"Multiplication"),(0,a.kt)("p",null,"Multiplication is done using the ",(0,a.kt)("strong",{parentName:"p"},"*")," operator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Multiplying two numbers\n\n#include <stdio.h>\n\nint main() {\n\n  // Defining two variables\n  int num1 = 7;\n  int num2 = 4;\n\n  // Defining result variable\n  int result = num1 * num2;\n\n  printf("%d", result);\n\n  return 0;\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"28\n")),(0,a.kt)("h2",{id:"division"},"Division"),(0,a.kt)("p",null,"Division operator ",(0,a.kt)("strong",{parentName:"p"},"/")," is used for division operations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Dividing two numbers\n\n#include <stdio.h>\n\nint main() {\n\n  // Defining two variables\n  int num1 = 10;\n  int num2 = 2;\n\n  // Defining result variable\n  int result = num1 / num2;\n\n  printf("%d", result);\n\n  return 0;\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"5\n")),(0,a.kt)("h2",{id:"exponent"},"Exponent"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"pow(x, y)")," function returns, ",(0,a.kt)("strong",{parentName:"p"},"x")," raised to the power of ",(0,a.kt)("strong",{parentName:"p"},"y"),". You require including ",(0,a.kt)("inlineCode",{parentName:"p"},"<math.h>")," header file for the exponent operation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Calculating exponent\n\n#include <stdio.h>\n\n// Another library which has the exponent function\n#include <math.h>\n\nint main() {\n\n  // Defining two variables\n  int num1 = 2;\n  int num2 = 3;\n\n  // Defining result variable using the pow(num, exponent) function\n  int result = pow(num1, num2);\n\n  printf("%d", result);\n\n  return 0;\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"8\n")))}g.isMDXComponent=!0}}]);