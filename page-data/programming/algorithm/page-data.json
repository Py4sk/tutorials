{"componentChunkName":"component---src-templates-lesson-jsx","path":"/programming/algorithm/","result":{"data":{"site":{"siteMetadata":{"title":"The Programming Foundation"}},"mdx":{"frontmatter":{"title":"Algorithms"}}},"pageContext":{"id":"774315da-4bbe-5724-8fd6-1e3363c61246","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Algorithms\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Algorithms\"), mdx(\"h3\", null, \"An algorithm is the set of instructions in steps to solve a problem.\"), mdx(\"p\", null, \"In real-life if you had to count the number of members in a room, you would count one by one until you finish counting the last member.\"), mdx(\"p\", null, \"So we count a member and add one to the previously counted number, go to the next member, and repeat the same procedure until there are no members in the room. This is a step-wise procedure we use to count the number of members.\"), mdx(\"p\", null, \"For a computer to solve a problem or perform a task for us, for example, a counting problem, we give it a sequence of instructions similar to the step-by-step procedure humans follow. An algorithm is a sequence of instructions given to computers to solve problems or perform tasks.\"), mdx(\"p\", null, \"An algorithm can be written in a plain language, a pseudo-code or described by a diagram-based flowchart and it can be implemented in different computer programming langugages. \"), mdx(\"h2\", null, \"Pseudo-code\"), mdx(\"p\", null, \"Pseudo-codes are a simplified version of computer programs and written in natural or human-readable language.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pseudo-code can be read and followed by programmers to write computer programs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pseudo-code does not have specific syntax and can't be executed by a computer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pseudo-code can be implemented in a specific programming language.\")), mdx(\"p\", null, \"For example, a pseudo-code of counting members in a room can be as follows:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"set total_number_members to zero\\nloop while the input of member name is not empty\\n    increment total_number_members by one\\noutput total_number_members\"))), mdx(\"h2\", null, \"Flowchart\"), mdx(\"p\", null, \"An algorithm can be described as a pictorial representation with different symbols, shapes, arrow that describes the different process. Each shape describes a different process:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The process is represented graphically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The process is described block by block with the arrows between blocks indicating the order of workflow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The described steps are easy to follow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Following the logic in diagram does not require understanding of the code.\")), mdx(\"p\", null, \"For example, a flowchart of counting members is as follows:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"                        .......\\n                       / Start \\\\\\n                       \\\\......./\\n                           |\\n                           V\\n            ---------------------------------\\n            |    total_number_members = 0   |\\n            ---------------------------------\\n                           |\\n                           V\\n                           *\\n                        *     * \\n                     *            *          \\n                  *                   *\\n               *                          *       no\\n     ------> *   input name is not empty?    * ------------\\n     |         *                          *               |\\n     |            *                   *                   |\\n     |               *             *                      |\\n     |                  *      *                          |\\n     |                     *                              |\\n     |                     |  yes                         |\\n     |                     V                              |\\n     |    -------------------------------------------     |\\n     ----|   increment total_number_members by one  |     |\\n         --------------------------------------------     |\\n                                                          |\\n                           --------------------------------\\n                           |\\n                           V\\n                -------------------------------------\\n               /  output total_number_members       /\\n              --------------------------------------\\n                           |\\n                           V\\n                        .......\\n                       /  End  \\\\\\n                       \\\\......./\"))), mdx(\"h2\", null, \"Python implementation\"), mdx(\"p\", null, \"The above pseudo-code or flowchart can be followed to write a Python code as follows:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-python\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"total_number_members \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"input\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"name? \\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"!=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n    total_number_members \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"+=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"print\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"total_number_members\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\")))), mdx(\"p\", null, \"Output:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"name? \\\"Jack Lee\\\"\\nname? \\\"Mary Lo\\\"\\nname?\\n2\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"staticQueryHashes":[]}